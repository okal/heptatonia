!!! 5
html(lang='en')
head
    meta(charset='utf-8')
    title color-scheme.js
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    meta(name='description', content='color-scheme.js - generate pleasant color schemes in JavaScript')
    meta(name='author', content='Brian Hann')
    style
      body {
        padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
      }
      .color {
        height: 50px;
        width: 50px;
        float: left;
        margin: 5px;
        border: 1px solid #ccc;
      }
      #hue-box {
        margin-left: 20px;
        margin-top: -19px;
      }
    link(href='http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css', rel='stylesheet')
    link(href='http://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.0/css/smoothness/jquery-ui-1.10.0.custom.min.css', rel='stylesheet')
    // HTML5 shim, for IE6-8 support of HTML5 elements 
    <!--[if lt IE 9]>
    script(src='http://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.6.2/html5shiv.js')
    <![endif]-->
  body(ng-app)
    a.hidden-phone(href="https://github.com/c0bra/color-scheme-js")
      img(style="position: absolute; top: 0; right: 0; border: 0; z-index: 2000", src="https://s3.amazonaws.com/github/ribbons/forkme_right_orange_ff7600.png", alt="Fork me on GitHub")

    .navbar.navbar-fixed-top
      .navbar-inner
        .container
            button.btn.btn-navbar(type='button', data-toggle='collapse', data-target='.nav-collapse')
              span.icon-bar
              span.icon-bar
              span.icon-bar
          
            a.brand(href='#') color-scheme.js
            .nav-collapse.collapse
              ul.nav
                li
                  a(href='#example') Example
                li
                  a(href='#tryit') Try it!

    .container
      .row
        .span12
          .row
            .span12
              h1 color-scheme.js
          .row
            .span12
              p
                | Generate nice, pretty color schemes with JavaScript.
      
      .row
        .span12
          //- a(name='example')
          h2#example Example
          pre.
             scm = new ColorScheme;
             scm.from_hue(21)
                .scheme('triade')
                .distance(0.1)
                .add_complement(false)
                .variation('pastel')
                .web_safe(true);
            
             var colors = scm.colors();
              
             console.log(colors);

             # [ 'ff9966', '996633', 'ffcccc', 'cc6633', '669966', '339966', 'ccffcc', '33cc99', '339999', '339966', 'ccffcc', '33cc99' ]

      .row
        .span12
          h2#tryit Try it!
        .row
          .span12
            .offset1
              .row
                .span12
                  strong.span1.pull-left Hue
                  #hue-slider.span5
                  #hue-box.color.middle(style="background-color: #ffffff")
              .row: &nbsp;
              .row
                .span12
                  strong.span1 Scheme
                  .btn-group(data-toggle="buttons-radio")
                    //- "mono monochromatic contrast triade tetrade analogic"
                    button.btn.active(type='button', data-toggle='button', onclick='setScheme("monochromatic")') Monochromatic
                    button.btn(type='button', data-toggle='button', onclick='setScheme("contrast")') Contrast
                    button.btn(type='button', data-toggle='button', onclick='setScheme("triade")') Triade
                    button.btn(type='button', data-toggle='button', onclick='setScheme("tetrade")') Tetrade
                    button.btn(type='button', data-toggle='button', onclick='setScheme("analogic")') Analogic

                  button#add-complement.btn.hide(type='button', data-toggle='button') Add Complement
              .row: &nbsp;
              //- .row
                .span2
                  button#add-complement.btn.hide(type='button', data-toggle='button') Add Complement
              .row
                .span12
                  strong.span1.pull-left Distance
                  #distance-slider.span5 
                  span#distance
                  small(style="padding-left: 20px") (won't affect mono or contrast)
              .row: &nbsp;
              .row
                .span12
                  strong.span1.pull-left Variation
                  .btn-group(data-toggle="buttons-radio")
                    //- default pastel soft light hard pale
                    button.btn.active(type='button', data-toggle='button', onclick='setVariation("default")') Default
                    button.btn(type='button', data-toggle='button', onclick='setVariation("pastel")') Pastel
                    button.btn(type='button', data-toggle='button', onclick='setVariation("soft")') Soft
                    button.btn(type='button', data-toggle='button', onclick='setVariation("light")') Light
                    button.btn(type='button', data-toggle='button', onclick='setVariation("hard")') Hard
                    button.btn(type='button', data-toggle='button', onclick='setVariation("pale")') Pale
              .row: &nbsp;
              .row
                .span12
                  strong.span1.pull-left Web Safe
                  .btn-group(data-toggle="buttons-radio")
                    button.btn(data-toggle='button', onclick='setWebSafe(true)') Yes
                    button.btn.active(data-toggle='button', onclick='setWebSafe(false)') No
      .row: &nbsp;
      .row
        .span12
          h4 Generated Colors
        .row.span12
            #colors
            .clearfix

      .row: &nbsp;

      .row
        .span12
          h3 Todo

          p.
            The code is translated but all the docs and tests need to be written/copied. Hang tight!
    
    
    script(src='http://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js')
    script(src='http://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.0/jquery-ui.min.js')
    script(src='http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js')
    //- script(src='http://cdnjs.cloudflare.com/ajax/libs/coffee-script/1.4.0/coffee-script.min.js')
    //- script(src='src/lib/color-scheme.coffee', type="text/coffeescript")
    script(src='lib/color-scheme.min.js')

    script
      //- console.log("C", ColorScheme);
      var scheme = null;
      $(document).ready(function(){
        $("#hue-slider").slider({
          min: 0,
          max: 360,
          slide: function(e, ui) {
            // ui.value has the number
            setHue(ui.value)
          }
        });

        $("#distance-slider").slider({
          min: 0,
          max: 1,
          value: 0.5,
          step: 0.01,
          slide: function(e, ui) {
            // ui.value has the number
            setDistance(ui.value)
          }
        });

        scheme = new ColorScheme;
        setHue(0);
        generateColors();

        $('#add-complement').click(addComplement);
      });

      function generateColors() {
        $('#colors').html('');
        var colors = scheme.colors();
        for (var i in colors) {
          var c = colors[i];
          var newDiv = '<div class="color" style="background-color: #' + c + '"></div>';
          $('#colors').append(newDiv);
        }
      }

      function setHue(hue) {
        scheme.from_hue(hue);

        var bg = scheme.colors()[0];
        $('#hue-box').attr('style', 'background-color: #' + bg);

        generateColors();
      }

      function setScheme(newScheme) {
        if (newScheme == 'analogic') {
          $('#add-complement').show();
        }
        else {
         $('#add-complement').hide(); 
        }
        scheme.scheme(newScheme);
        generateColors();
      }

      function addComplement() {
        if ( $('#add-complement').hasClass('active') ) {
          scheme.add_complement(false);
        }
        else {
          scheme.add_complement(true);
        }
        generateColors();
      }

      function setDistance(distance) {
        scheme.distance(distance);
        generateColors();
      }

      function setVariation(variation) {
        scheme.variation(variation);
        generateColors();
      }

      function setWebSafe(websafe) {
        scheme.web_safe(websafe);
        generateColors();
      }

      function randomHue() {
        var h = Math.round(Math.random() * 360);
        scheme.from_hue(h);
        generateColors();
      }